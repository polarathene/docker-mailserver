(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{100:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return c}));var a=n(3),r=n(7),i=(n(0),n(104)),o={id:"install-examples",title:"Installation Examples"},s={unversionedId:"install-examples",id:"install-examples",isDocsHomePage:!1,title:"Installation Examples",description:"Building a simple mailserver",source:"@site/docs/Installation-Examples.md",slug:"/install-examples",permalink:"/docker-mailserver/install-examples",editUrl:"https://github.com/polarathene/docker-mailserver/tree/docs/docusaurus-demo/website/docs/Installation-Examples.md",version:"current",sidebar:"docs",previous:{title:"FAQ and Tips",permalink:"/docker-mailserver/faq"},next:{title:"Forward-Only mailserver with LDAP authentication",permalink:"/docker-mailserver/usecase-forwardonly-ldap-auth"}},l=[{value:"Building a simple mailserver",id:"building-a-simple-mailserver",children:[]},{value:"Using docker-mailserver behind proxy",id:"using-docker-mailserver-behind-proxy",children:[{value:"Information",id:"information",children:[]},{value:"Configuration of the used proxy software",id:"configuration-of-the-used-proxy-software",children:[]},{value:"Configuration of the backend (<code>dovecot</code> and <code>postfix</code>)",id:"configuration-of-the-backend-dovecot-and-postfix",children:[]}]}],p={toc:l};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"building-a-simple-mailserver"},"Building a simple mailserver"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"WARNING"),": Adding the docker network's gateway to the list of trusted hosts, e.g. using the ",Object(i.b)("inlineCode",{parentName:"p"},"network")," or ",Object(i.b)("inlineCode",{parentName:"p"},"connected-networks")," option, can create an ",Object(i.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Open_mail_relay"},Object(i.b)("strong",{parentName:"a"},"open relay")),", ",Object(i.b)("a",{parentName:"p",href:"https://github.com/tomav/docker-mailserver/issues/1405#issuecomment-590106498"},"for instance")," if IPv6 is enabled on the host machine but not in Docker. (",Object(i.b)("a",{parentName:"p",href:"https://github.com/tomav/docker-mailserver/issues/1405"},"#1405"),")"),Object(i.b)("p",null,"We are going to use this docker based mailserver:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"First create a directory for the mailserver and get the setup script:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"mkdir -p /var/ds/mail.example.org\ncd /var/ds/mail.example.org/\n\ncurl -o setup.sh \\\n    https://raw.githubusercontent.com/tomav/docker-mailserver/master/setup.sh\nchmod a+x ./setup.sh\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Create the file ",Object(i.b)("inlineCode",{parentName:"p"},"docker-compose.yml")," with a content like this:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'version: \'2\'\n\nservices:\n  mail:\n    image: tvial/docker-mailserver:latest\n    hostname: mail\n    domainname: example.org\n    container_name: mail\n    ports:\n    - "25:25"\n    - "587:587"\n    - "465:465"\n    volumes:\n    - ./data/:/var/mail/\n    - ./state/:/var/mail-state/\n    - ./config/:/tmp/docker-mailserver/\n    - /var/ds/wsproxy/letsencrypt/:/etc/letsencrypt/\n    environment:\n    - PERMIT_DOCKER=network\n    - SSL_TYPE=letsencrypt\n    - ONE_DIR=1\n    - DMS_DEBUG=1\n    - SPOOF_PROTECTION=0\n    - REPORT_RECIPIENT=1\n    - ENABLE_SPAMASSASSIN=0\n    - ENABLE_CLAMAV=0\n    - ENABLE_FAIL2BAN=1\n    - ENABLE_POSTGREY=0\n    cap_add:\n    - NET_ADMIN\n    - SYS_PTRACE\n')),Object(i.b)("p",{parentName:"li"},"For more details about the environment variables that can be used,\nand their meaning and possible values, check also these:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/tomav/docker-mailserver#environment-variables"},"https://github.com/tomav/docker-mailserver#environment-variables")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/tomav/docker-mailserver/blob/master/.env.dist"},"https://github.com/tomav/docker-mailserver/blob/master/.env.dist"))),Object(i.b)("p",{parentName:"li"},"Make sure to set the proper ",Object(i.b)("inlineCode",{parentName:"p"},"domainname")," that you will use for the\nemails. We forward only SMTP ports (not POP3 and IMAP) because we\nare not interested in accessing the mailserver directly (from a\nclient).  We also use these settings:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"PERMIT_DOCKER=network")," because we want to send emails from other\ndocker containers."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"SSL_TYPE=letsencrypt")," because we will manage SSL certificates\nwith letsencrypt."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"We need to open these ports on the firewall: ",Object(i.b)("inlineCode",{parentName:"p"},"25"),", ",Object(i.b)("inlineCode",{parentName:"p"},"587"),", ",Object(i.b)("inlineCode",{parentName:"p"},"465")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"ufw allow 25\nufw allow 587\nufw allow 465\n")),Object(i.b)("p",{parentName:"li"},"On your server you may have to do it differently.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Pull the docker image:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"docker pull tvial/docker-mailserver:latest\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Now generate the DKIM keys with ",Object(i.b)("inlineCode",{parentName:"p"},"./setup.sh config dkim")," and copy\nthe content of the file ",Object(i.b)("inlineCode",{parentName:"p"},"config/opendkim/keys/domain.tld/mail.txt"),"\non the domain zone configuration at the DNS server. I use\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/docker-scripts/bind9"},"bind9")," for managing my\ndomains, so I just paste it on ",Object(i.b)("inlineCode",{parentName:"p"},"example.org.db"),":"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'mail._domainkey IN      TXT     ( "v=DKIM1; h=sha256; k=rsa; "\n        "p=MIIBIjANBgkqhkiG9w0BAQEFACAQ8AMIIBCgKCAQEAaH5KuPYPSF3Ppkt466BDMAFGOA4mgqn4oPjZ5BbFlYA9l5jU3bgzRj3l6/Q1n5a9lQs5fNZ7A/HtY0aMvs3nGE4oi+LTejt1jblMhV/OfJyRCunQBIGp0s8G9kIUBzyKJpDayk2+KJSJt/lxL9Iiy0DE5hIv62ZPP6AaTdHBAsJosLFeAzuLFHQ6USyQRojefqFQtgYqWQ2JiZQ3"\n        "iqq3bD/BVlwKRp5gH6TEYEmx8EBJUuDxrJhkWRUk2VDl1fqhVBy8A9O7Ah+85nMrlOHIFsTaYo9o6+cDJ6t1i6G1gu+bZD0d3/3bqGLPBQV9LyEL1Rona5V7TJBGg099NQkTz1IwIDAQAB" )  ; ----- DKIM key mail for example.org\n\n'))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Add these configurations as well on the same file on the DNS server:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'mail      IN  A   10.11.12.13\n\n; mailservers for example.org\n    3600  IN  MX  1  mail.example.org.\n\n; Add SPF record\n          IN TXT "v=spf1 mx ~all"\n')),Object(i.b)("p",{parentName:"li"},"Then don't forget to change the serial number and to restart the service.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Get an SSL certificate from letsencrypt. I use\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/docker-scripts/wsproxy"},"wsproxy")," for managing\nSSL letsencrypt certificates of my domains:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"cd /var/ds/wsproxy\nds domains-add mail mail.example.org\nds get-ssl-cert myemail@gmail.com mail.example.org --test\nds get-ssl-cert myemail@gmail.com mail.example.org\n")),Object(i.b)("p",{parentName:"li"},"Now the certificates will be available on\n",Object(i.b)("inlineCode",{parentName:"p"},"/var/ds/wsproxy/letsencrypt/live/mail.example.org"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Start the mailserver and check for any errors:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"apt install docker-compose\ndocker-compose up mail\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Create email accounts and aliases with ",Object(i.b)("inlineCode",{parentName:"p"},"SPOOF_PROTECTION=0"),":"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"./setup.sh email add admin@example.org passwd123\n./setup.sh email add info@example.org passwd123\n./setup.sh alias add admin@example.org myemail@gmail.com\n./setup.sh alias add info@example.org myemail@gmail.com\n./setup.sh email list\n./setup.sh alias list\n")),Object(i.b)("p",{parentName:"li"},"Aliases make sure that any email that comes to these accounts is\nforwarded to my real email address, so that I don't need to use\nPOP3/IMAP in order to get these messages. Also no anti-spam and\nanti-virus software is needed, making the mailserver lighter.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Or create email accounts and aliases with ",Object(i.b)("inlineCode",{parentName:"p"},"SPOOF_PROTECTION=1"),":"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"./setup.sh email add admin.gmail@example.org passwd123\n./setup.sh email add info.gmail@example.org passwd123\n./setup.sh alias add admin@example.org admin.gmail@example.org\n./setup.sh alias add info@example.org info.gmail@example.org\n./setup.sh alias add admin.gmail@example.org myemail@gmail.com\n./setup.sh alias add info.gmail@example.org myemail@gmail.com\n./setup.sh email list\n./setup.sh alias list\n")),Object(i.b)("p",{parentName:"li"},"This extra step is required to avoid the ",Object(i.b)("inlineCode",{parentName:"p"},"553 5.7.1 Sender address rejected: not owned by user")," error (the account used for setting up gmail is ",Object(i.b)("inlineCode",{parentName:"p"},"admin.gmail@example.org")," and ",Object(i.b)("inlineCode",{parentName:"p"},"info.gmail@example.org")," )")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Send some test emails to these addresses and make other tests. Then\nstop the container with ",Object(i.b)("inlineCode",{parentName:"p"},"Ctrl+c")," and start it again as a daemon:\n",Object(i.b)("inlineCode",{parentName:"p"},"docker-compose up -d mail"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Now save on Moodle configuration the SMTP settings and test by\ntrying to send some messages to other users:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"SMTP hosts"),": ",Object(i.b)("inlineCode",{parentName:"li"},"mail.example.org:465")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"SMTP security"),": ",Object(i.b)("inlineCode",{parentName:"li"},"SSL")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"SMTP username"),": ",Object(i.b)("inlineCode",{parentName:"li"},"info@example.org")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"SMTP password"),": ",Object(i.b)("inlineCode",{parentName:"li"},"passwd123"))))),Object(i.b)("h2",{id:"using-docker-mailserver-behind-proxy"},"Using docker-mailserver behind proxy"),Object(i.b)("h3",{id:"information"},"Information"),Object(i.b)("p",null,"If you are hiding your container behind a proxy service you might have discovered that the proxied requests from now on contain the proxy IP as the request origin. Whilst this behavior is technical correct it produces certain problems on the containers behind the proxy as they cannot distinguish the real origin of the requests anymore."),Object(i.b)("p",null,"To solve this problem on TCP connections we can make use of the ",Object(i.b)("a",{parentName:"p",href:"https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt"},"proxy protocol"),". Compared to other workarounds that exist (",Object(i.b)("inlineCode",{parentName:"p"},"X-Forwarded-For")," which only works for HTTP requests or ",Object(i.b)("inlineCode",{parentName:"p"},"Tproxy")," that requires you to recompile your kernel) the proxy protocol:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"it is protocol agnostic (can work with any layer 7 protocols, even when encrypted)."),Object(i.b)("li",{parentName:"ul"},"it does not require any infrastructure changes"),Object(i.b)("li",{parentName:"ul"},"nat-ing firewalls have no impact it"),Object(i.b)("li",{parentName:"ul"},"it is scalable\nThe is only one condition: ",Object(i.b)("strong",{parentName:"li"},"both endpoints")," of the connection MUST be compatible with proxy protocol.")),Object(i.b)("p",null,"Luckily ",Object(i.b)("inlineCode",{parentName:"p"},"dovecot")," and ",Object(i.b)("inlineCode",{parentName:"p"},"postfix")," are both Proxy-Protocol ready softwares so it depends only on your used reverse-proxy/loadbalancer."),Object(i.b)("h3",{id:"configuration-of-the-used-proxy-software"},"Configuration of the used proxy software"),Object(i.b)("p",null,"The configuration depends on the used proxy system. I will provide the configuration examples of ",Object(i.b)("a",{parentName:"p",href:"https://traefik.io/"},"traefik v2")," using IMAP and SMTP with implicit TLS. Feel free to add your configuration if you achived the same goal using different proxy software below:"),Object(i.b)("details",null,Object(i.b)("summary",null,"traefik v2"),Object(i.b)("p",null,"  Truncated configuration of traefik itself:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'version: \'3.7\'\nservices:\n  reverse-proxy:\n    image: traefik:v2.4\n    container_name: docker-traefik\n    restart: always\n    command:\n      - "--providers.docker"\n      - "--providers.docker.exposedbydefault=false"\n      - "--providers.docker.network=proxy"\n      - "--entrypoints.web.address=:80"\n      - "--entryPoints.websecure.address=:443"\n      - "--entryPoints.smtp.address=:25"\n      - "--entryPoints.smtp-ssl.address=:465"\n      - "--entryPoints.imap-ssl.address=:993"\n      - "--entryPoints.sieve.address=:4190"\n    ports:\n      - "25:25"\n      - "465:465"\n      - "993:993"\n      - "4190:4190"\n[...]\n')),Object(i.b)("p",null,"Truncated list of neccessary labels on the mailserver container:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'version: \'2\'\nservices:\n  mail:\n    image: tvial/docker-mailserver:release-v7.2.0\n    restart: always\n    networks:\n      - proxy\n    labels:\n      - "traefik.enable=true"\n      - "traefik.tcp.routers.smtp.rule=HostSNI(`*`)"\n      - "traefik.tcp.routers.smtp.entrypoints=smtp"\n      - "traefik.tcp.routers.smtp.service=smtp"\n      - "traefik.tcp.services.smtp.loadbalancer.server.port=25"\n      - "traefik.tcp.services.smtp.loadbalancer.proxyProtocol.version=1"\n      - "traefik.tcp.routers.smtp-ssl.rule=HostSNI(`*`)"\n      - "traefik.tcp.routers.smtp-ssl.entrypoints=smtp-ssl"\n      - "traefik.tcp.routers.smtp-ssl.service=smtp-ssl"\n      - "traefik.tcp.services.smtp-ssl.loadbalancer.server.port=465"\n      - "traefik.tcp.services.smtp-ssl.loadbalancer.proxyProtocol.version=1"\n      - "traefik.tcp.routers.imap-ssl.rule=HostSNI(`*`)"\n      - "traefik.tcp.routers.imap-ssl.entrypoints=imap-ssl"\n      - "traefik.tcp.routers.imap-ssl.service=imap-ssl"\n      - "traefik.tcp.services.imap-ssl.loadbalancer.server.port=10993"\n      - "traefik.tcp.services.imap-ssl.loadbalancer.proxyProtocol.version=2"\n      - "traefik.tcp.routers.sieve.rule=HostSNI(`*`)"\n      - "traefik.tcp.routers.sieve.entrypoints=sieve"\n      - "traefik.tcp.routers.sieve.service=sieve"\n      - "traefik.tcp.services.sieve.loadbalancer.server.port=4190"\n[...]\n')),Object(i.b)("p",null,"Keep in mind that it is neccessary to use port ",Object(i.b)("inlineCode",{parentName:"p"},"10993")," here. More information below at ",Object(i.b)("inlineCode",{parentName:"p"},"dovecot")," configuration.")),Object(i.b)("h3",{id:"configuration-of-the-backend-dovecot-and-postfix"},"Configuration of the backend (",Object(i.b)("inlineCode",{parentName:"h3"},"dovecot")," and ",Object(i.b)("inlineCode",{parentName:"h3"},"postfix"),")"),Object(i.b)("p",null,"The following changes can be achived completely by adding the content to the appropriate files by using the projects ",Object(i.b)("a",{parentName:"p",href:"https://github.com/docker-mailserver/docker-mailserver/wiki/List-of-optional-config-files-&-directories"},"function to overwrite config files"),"."),Object(i.b)("p",null,"Changes for ",Object(i.b)("inlineCode",{parentName:"p"},"postfix")," can be applied by adding the following content to ",Object(i.b)("inlineCode",{parentName:"p"},"config/postfix-main.cf"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"postscreen_upstream_proxy_protocol = haproxy\n")),Object(i.b)("p",null,"and to ",Object(i.b)("inlineCode",{parentName:"p"},"config/postfix-master.cd"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"submission/inet/smtpd_upstream_proxy_protocol=haproxy\nsmtps/inet/smtpd_upstream_proxy_protocol=haproxy\n")),Object(i.b)("p",null,"Changes for ",Object(i.b)("inlineCode",{parentName:"p"},"dovecot")," can be applied by adding the following content to ",Object(i.b)("inlineCode",{parentName:"p"},"config/dovecot.cf"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"haproxy_trusted_networks = <your-proxy-ip>, <optional-cidr-notation>\nhaproxy_timeout = 3 secs\nservice imap-login {\n  inet_listener imaps {\n    haproxy = yes\n    ssl = yes\n    port = 10993\n  }\n}\n")),Object(i.b)("p",null,"Note that port ",Object(i.b)("inlineCode",{parentName:"p"},"10993")," is used here to avoid conflicts with internal systems like ",Object(i.b)("inlineCode",{parentName:"p"},"postscreen")," and ",Object(i.b)("inlineCode",{parentName:"p"},"amavis")," as they will exchange messages on the default port and obviously have a different origin then compared to the proxy."))}c.isMDXComponent=!0},104:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),c=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,u=m["".concat(o,".").concat(d)]||m[d]||b[d]||i;return n?r.a.createElement(u,s(s({ref:t},p),{},{components:n})):r.a.createElement(u,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);